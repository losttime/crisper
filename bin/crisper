#!/usr/bin/env node
/**
 * @license
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */

// jshint node: true
'use strict';

var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var crisp = require('../index');

var cliArgs = require('command-line-args');

var cli = cliArgs([
  {
    name: 'source',
    alias: 's',
    type: String,
    defaultOption: true,
    description: 'Input HTML file to split into HTML and JS files'
  },
  {
    name: 'html',
    alias: 'h',
    type: String,
    description: 'Ouput HTML file'
  },
  {
    name: 'js',
    alias: 'j',
    type: String,
    description: 'Output JS file'
  },
  {
    name: 'script-in-head',
    type: Boolean,
    defaultValue: true,
    description: [
      'If true, reference the output script in the beginning of <head> as <script defer>.',
      'If false, reference script at the end of <body> synchronously.',
      'The deferred script will better parallelize app startup, but will break some APIs like document.write.'
    ].join(' ')
  },
  {
    name: 'only-split',
    type: Boolean,
    description: 'Do not make a <script> tag in the output HTML.'
  },
  {
    name: 'always-write-script',
    type: Boolean,
    description: 'Always create an output script file, even if it is empty.'
  },
  {
    name: 'help',
    type: Boolean,
    description: 'Print usage'
  }
]);

function getUsage() {
  return cli.getUsage({
    title: 'crisper',
    description: 'Split inline scripts from an HTML file for CSP compliance'
  });
}

var args = cli.parse();

if (args.help) {
  console.log(getUsage());
  process.exit(0);
}

if (!args.html) {
  console.error('Error: Missing output html file!');
  console.error(getUsage());
  process.exit(1);
}

if (!args.js) {
  console.error('Error: Missing output js file!');
  console.error(getUsage());
  process.exit(1);
}

var source = args.source;
if (source) {
  source = path.resolve(source);
}
var outhtml = path.resolve(args.html);
var outscript = path.resolve(args.js);
var outScriptUri = path.relative(path.dirname(args.html), args.js);
var placeInHead = args['script-in-head'];
var onlySplit = args['only-split'];
var alwaysWriteScript = args['always-write-script'];

var docText = '';

function writeFile(filename, data, options) {
  mkdirp(path.dirname(filename), function(err) {
    if (err) {
      console.log('Could not create missing directory tree!', err);
      process.exit(1);
    } else {
      fs.writeFileSync(filename, data, options);
    }
  });
}

function processSource() {
  var split = crisp({
    source: docText,
    jsFileName: outScriptUri,
    scriptInHead: placeInHead,
    onlySplit: onlySplit,
    alwaysWriteScript: alwaysWriteScript
  });
  writeFile(outhtml, split.html, 'utf-8');
  if (split.js || split.js === "" && alwaysWriteScript) {
    writeFile(outscript, split.js, 'utf-8');
  }
}

if (source) {
  docText = fs.readFileSync(source, 'utf-8');
  processSource();
} else if (!process.stdin.isTTY) {
  process.stdin.setEncoding('utf-8');
  process.stdin.on('readable', function() {
    var chunk = process.stdin.read();
    if (chunk !== null) {
      docText += chunk;
    }
  });
  process.stdin.on('end', processSource);
} else {
  console.error('Missing source html file!');
  console.error('Supply file with STDIN or --source flag');
  console.error(getUsage());
  process.exit(1);
}
